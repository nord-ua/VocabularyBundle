<?php

namespace NordUa\VocabularyBundle\Repository;

use Doctrine\ODM\MongoDB\DocumentRepository;
use NordUa\VocabularyBundle\Document\Vocabulary;

/**
 * VocabularyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VocabularyRepository extends DocumentRepository {

  public function preload($lang, $types) {
    $qb = $this->createQueryBuilder();
    
    $qb->field('lang')->equals($lang)
      ->field('type')->in((array)$types);
      
    return $qb->getQuery()->execute();
  }
  
  public function findByQuery($type, $lang, $keyword = null) {
    $builder = $this->createQueryBuilder();

    if (!empty($keyword)) {
      $builder->field('value')->equals(new \MongoRegex("/^$keyword/i"));
    }

    $builder->field('type')->equals($type)
      ->field('lang')->equals($lang);

    $result = $builder->getQuery()->execute();

    return $result;
  }
  
  public function getByIds($ids) {
    $builder = $this->createQueryBuilder();
    $builder->field('_id')->in($ids);

    return $builder->getQuery()->execute();
  }
  
  public function getBySlugs($type, $slugs, $lang = 'ru') {
    $builder = $this->createQueryBuilder();
    
    $builder->field('type')->equals($type);
    $builder->field('slug')->in((array)$slugs);
    $builder->field('lang')->equals($lang);

    return $builder->getQuery()->execute();
  }
  
  public function getOneBySlug($type, $slug, $lang = 'ru') {
    $builder = $this->createQueryBuilder();
    
    $builder->field('type')->equals($type);
    $builder->field('slug')->equals($slug);
    $builder->field('lang')->equals($lang);

    return $builder->getQuery()->getSingleResult();
  }
  
  // TODO: remove this duplication! Later )
  public function getSlugsByValues($type, $lang, $values, $autocreate = true) {
    if (!is_array($values))
      $values = array($values);
    
    $builder = $this->createQueryBuilder();

    $builder
      ->field('type')->equals($type)
      ->field('lang')->equals($lang)
      ->field('value')->in($values);

    $result = $builder->getQuery()->execute();
    $wordsToAdd = array();
    foreach ($values as $value) {
      $wordsToAdd[strtolower($value)] = $value;
    }
    
    $slugs = array();
    /* @var $doc \Cleverbag\CommonBundle\Document\Vocabulary */
    foreach ($result as $doc) {
      $slugs[] = $doc->getSlug();
      unset($wordsToAdd[strtolower($doc->getValue())]);
    }
    
    if ($autocreate) {
      if (0 < count($wordsToAdd))
        foreach ($this->addWords($type, $lang, $wordsToAdd) as $doc)
          $slugs[] = $doc->getSlug();
    }
    
    return $slugs;
  }
  
  public function getByTypeAndLang($type, $lang) {
    $builder = $this->createQueryBuilder();

    $builder
      ->field('type')->equals($type)
      ->field('lang')->equals($lang);

    $result = $builder->getQuery()->execute();
    
    return $result;
  }
  
  public function getIdsByValues($type, $lang, $values) {
    if (!is_array($values))
      $values = array($values);
    
    $builder = $this->createQueryBuilder();

    $builder
      ->field('type')->equals($type)
      ->field('lang')->equals($lang)
      ->field('value')->in($values);

    $result = $builder->getQuery()->execute();
    $wordsToAdd = array();
    foreach ($values as $value) {
      $wordsToAdd[self::tolower($value)] = $value;
    }
    
    $ids = array();
    /* @var $doc \Cleverbag\CommonBundle\Document\Vocabulary */
    foreach ($result as $doc) {
      $ids[] = $doc->getId();
      unset($wordsToAdd[self::tolower($doc->getValue())]);
    }
    
    if (0 < count($wordsToAdd))
      foreach ($this->addWords($type, $lang, $wordsToAdd) as $doc)
        $ids[] = $doc->getId();
    
    return $ids;
  }
  
  public function addWords($type, $lang, $words) {
    $dm = $this->getDocumentManager();
    
    $documents = array();
    foreach ($words as $word) {
      $doc = new Vocabulary();
      $doc->setLang($lang)
        ->setType($type)
        ->setValue($word);
      
      $documents[] = $doc;
      $dm->persist($doc);
    }
    
    $dm->flush($documents);
    $docs = array();
    foreach ($documents as $doc) 
      $docs[] = $doc;
    
    return $docs;
  }
  
  static public function tolower($text) {
    return mb_convert_case($text, MB_CASE_LOWER, "UTF-8");
  }
}